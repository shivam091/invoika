= label_tag :selections, "", class: "form-label", data: {select_all_checkbox_target: "count"}
.table-responsive
  %table.table.table-striped
    %thead
      %tr
        %th{width: "25px", scope: "col"}#
        - if @invoices&.count > 0
          %th{width: "25px", scope: "col"}
            = check_box_tag "checkbox", nil, false, class: "form-check-input", data: {select_all_checkbox_target: "selectAllCheckbox"}
        %th{scope: "col"}= t(".client")
        %th{scope: "col"}= t(".invoice_date")
        %th{scope: "col"}= t(".due_date")
        %th{scope: "col"}= t(".amount")
        %th{scope: "col"}= t(".transactions")
        %th{scope: "col"}= t(".status")
        %th{width: "25px", scope: "col"}= t(".actions")
    %tbody
      - if @invoices&.each.with_index(1) do |invoice, index|
        %tr
          %td.fw-bold
            = (@pagy.offset + index)
          %td
            = check_box_tag "invoice_ids[]", invoice.id, false, class: "form-check-input", data: {select_all_checkbox_target: "checkbox"}
          %td
            .d-flex.align-items-center.justify-content-start
              = external_svg_tag("svgs/missing_user_avatar.svg", height: 64, width: 64, class: "me-2")
              .d-flex.flex-column
                .row
                  .col-lg-12
                    = link_to invoice.client_full_name, "javascript:void(0)", class: "me-1 fw-bold"
                    = badge_tag invoice.code, {color: ::Invoika::Color.of("#006B75FF")}, {href: "javascript:void(0)"}
                    - if invoice.is_recurred?
                      %span{title: t(".recurring_enabled_for_period", days: invoice.recurring_cycle), data: {toggle: "tooltip"}}
                        = external_svg_tag("svgs/recycling.svg", class: "recurring-cycle-icon", width: 16, height: 16)
                %span.text-muted.text-start
                  = invoice.client_email
          %td= badge_tag invoice.invoice_date.to_fs(:long), {color: ::Invoika::Color.of("#145DA0FF")}
          %td= invoice_due_date_badge(invoice)
          %td
            = number_to_currency(0.00, unit: invoice.currency.symbol)
          %td
          %td= invoice_status_badge(invoice)
          %td.actions
            .dropstart
              = link_to "javascript:void(0)", class: "text-default", data: {bs_toggle: "dropdown"}, aria: {expanded: false} do
                = external_svg_tag("svgs/ellipsis-vertical.svg")
              %ul.dropdown-menu.dropdown-menu-dark
                %li
                  = link_to edit_invoice_path(invoice), class: "dropdown-item" do
                    = external_svg_tag("svgs/pencil.svg")
                    = button_text(:edit)
                %li
                  = link_to "javascript:void(0)", class: "dropdown-item" do
                    = external_svg_tag("svgs/alarm-clock.svg")
                    = t(".reminder")
                %li
                  = link_to "javascript:void(0)", class: "dropdown-item" do
                    = external_svg_tag("svgs/link.svg")
                    = t(".invoice_url")
                %li
                  = link_to invoice_path(invoice), class: "dropdown-item dropdown-item-danger",
                    data: {turbo_confirm: t(".delete_invoice_confirmation_text"), turbo_method: :delete} do
                    = external_svg_tag("svgs/trash.svg")
                    = button_text(:delete)
      - end.empty?
        %tr
          %td.fw-bold.text-center{colspan: ::Invoice.columns.count}
            - if current_action?("paid")
              = t(".no_paid_invoices_to_display")
            - elsif current_action?("unpaid")
              = t(".no_unpaid_invoices_to_display")
            - elsif current_action?("draft")
              = t(".no_draft_invoices_to_display")
            - elsif current_action?("overdue")
              = t(".no_overdue_invoices_to_display")
            - else
              = t(".no_invoices_to_display")
